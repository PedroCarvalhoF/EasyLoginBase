// <auto-generated />
using System;
using EasyLoginBase.InfrastructureData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyLoginBase.InfrastructureData.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20250429191219_tbl_EstoqueProdutos")]
    partial class tbl_EstoqueProdutos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Filial.FilialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NomeFilial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("PessoaClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("NomeFilial")
                        .IsUnique();

                    b.HasIndex("PessoaClienteId");

                    b.ToTable("Filiais", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PDV.PontoVendaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Aberto")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Cancelado")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FilialPdvId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioPdvId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FilialPdvId");

                    b.HasIndex("UsuarioPdvId");

                    b.ToTable("PontosVendas", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PDV.UsuarioPdvEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AcessoCaixa")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioCaixaPdvEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCaixaPdvEntityId")
                        .IsUnique();

                    b.ToTable("UsuariosPdvs", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataVencimentoUso")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("UsuarioEntityClienteId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEntityClienteId");

                    b.ToTable("PessoaClientes", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteVinculadaEntity", b =>
                {
                    b.Property<Guid>("PessoaClienteEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsuarioVinculadoId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("AcessoPermitido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("PessoaClienteEntityId", "UsuarioVinculadoId");

                    b.HasIndex("UsuarioVinculadoId");

                    b.ToTable("PessoasClientesVinculadas", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Preco.Produto.CategoriaPreco.CategoriaPrecoProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoriaPreco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPreco")
                        .IsUnique();

                    b.ToTable("CategoriasPrecosProdutos", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Preco.Produto.PrecoProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoriaPrecoProdutoEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FilialEntityId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PrecoProduto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProdutoEntityId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TipoPrecoProdutoEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPrecoProdutoEntityId");

                    b.HasIndex("FilialEntityId");

                    b.HasIndex("ProdutoEntityId", "FilialEntityId", "CategoriaPrecoProdutoEntityId")
                        .HasDatabaseName("IX_Produto_Filial_Categoria");

                    b.ToTable("PrecosProdutos", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.CategoriaProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NomeCategoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("NomeCategoria")
                        .IsUnique();

                    b.ToTable("CategoriasProdutos", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.Estoque.EstoqueProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FilialId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantidade")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("EstoqueProdutos", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.ProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoriaProdutoEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CodigoProduto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UnidadeMedidaProdutoEntityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UsuarioRegistroId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaProdutoEntityId");

                    b.HasIndex("CodigoProduto")
                        .IsUnique();

                    b.HasIndex("NomeProduto")
                        .IsUnique();

                    b.HasIndex("UnidadeMedidaProdutoEntityId");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.UnidadeMedidaProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Sigla")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UnidadeMedidaProdutos");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.User.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("SobreNome")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.User.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Filial.FilialEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteEntity", "PessoaCliente")
                        .WithMany("Filiais")
                        .HasForeignKey("PessoaClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PessoaCliente");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PDV.PontoVendaEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.Filial.FilialEntity", "FilialPdv")
                        .WithMany("PontoVendaEntities")
                        .HasForeignKey("FilialPdvId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.PDV.UsuarioPdvEntity", "UsuarioPdv")
                        .WithMany("PontoVendaEntities")
                        .HasForeignKey("UsuarioPdvId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FilialPdv");

                    b.Navigation("UsuarioPdv");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PDV.UsuarioPdvEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", "UserCaixaPdvEntity")
                        .WithOne("UsuarioPdv")
                        .HasForeignKey("EasyLoginBase.Domain.Entities.PDV.UsuarioPdvEntity", "UsuarioCaixaPdvEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserCaixaPdvEntity");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", "UsuarioEntityCliente")
                        .WithMany("PessoasClientes")
                        .HasForeignKey("UsuarioEntityClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UsuarioEntityCliente");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteVinculadaEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteEntity", "PessoaClienteEntity")
                        .WithMany("UsuariosVinculados")
                        .HasForeignKey("PessoaClienteEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", "UsuarioVinculado")
                        .WithMany("ClientesVinculados")
                        .HasForeignKey("UsuarioVinculadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PessoaClienteEntity");

                    b.Navigation("UsuarioVinculado");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Preco.Produto.PrecoProdutoEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.Preco.Produto.CategoriaPreco.CategoriaPrecoProdutoEntity", "CategoriaPrecoProdutoEntity")
                        .WithMany("PrecoProdutoEntities")
                        .HasForeignKey("CategoriaPrecoProdutoEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.Filial.FilialEntity", "FilialEntity")
                        .WithMany("PrecoProdutoEntities")
                        .HasForeignKey("FilialEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.Produto.ProdutoEntity", "ProdutoEntity")
                        .WithMany("PrecosEntities")
                        .HasForeignKey("ProdutoEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoriaPrecoProdutoEntity");

                    b.Navigation("FilialEntity");

                    b.Navigation("ProdutoEntity");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.Estoque.EstoqueProdutoEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.Filial.FilialEntity", "Filial")
                        .WithMany("EstoqueProdutoEntities")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.Produto.ProdutoEntity", "Produto")
                        .WithMany("EstoqueProdutoEntities")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.ProdutoEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.Produto.CategoriaProdutoEntity", "CategoriaProdutoEntity")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaProdutoEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.Produto.UnidadeMedidaProdutoEntity", "UnidadeMedidaProdutoEntity")
                        .WithMany("ProdutosEntities")
                        .HasForeignKey("UnidadeMedidaProdutoEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoriaProdutoEntity");

                    b.Navigation("UnidadeMedidaProdutoEntity");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.User.UserRoleEntity", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EasyLoginBase.Domain.Entities.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Filial.FilialEntity", b =>
                {
                    b.Navigation("EstoqueProdutoEntities");

                    b.Navigation("PontoVendaEntities");

                    b.Navigation("PrecoProdutoEntities");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PDV.UsuarioPdvEntity", b =>
                {
                    b.Navigation("PontoVendaEntities");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.PessoaCliente.PessoaClienteEntity", b =>
                {
                    b.Navigation("Filiais");

                    b.Navigation("UsuariosVinculados");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Preco.Produto.CategoriaPreco.CategoriaPrecoProdutoEntity", b =>
                {
                    b.Navigation("PrecoProdutoEntities");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.CategoriaProdutoEntity", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.ProdutoEntity", b =>
                {
                    b.Navigation("EstoqueProdutoEntities");

                    b.Navigation("PrecosEntities");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.Produto.UnidadeMedidaProdutoEntity", b =>
                {
                    b.Navigation("ProdutosEntities");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.User.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EasyLoginBase.Domain.Entities.User.UserEntity", b =>
                {
                    b.Navigation("ClientesVinculados");

                    b.Navigation("PessoasClientes");

                    b.Navigation("UserRoles");

                    b.Navigation("UsuarioPdv");
                });
#pragma warning restore 612, 618
        }
    }
}
